var documenterSearchIndex = {"docs":
[{"location":"Serialization/custom_serializer/#Instructions-on-how-to-use-a-serializer-different-than-Julia's-inbuilt-serializer","page":"Serialization","title":"Instructions on how to use a serializer different than Julia's inbuilt serializer","text":"","category":"section"},{"location":"api/#Available-features-in-the-public-API","page":"API","title":"Available features in the public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = DistributedWorkflows","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [DistributedWorkflows]\nPages = [\"wrapper.jl\"]","category":"page"},{"location":"api/#DistributedWorkflows.application_config-Tuple{String, String, String}","page":"API","title":"DistributedWorkflows.application_config","text":"application_config(port::String, impl::String, fname::String)\n\nConvenience constructor for configuring a workflow application with a single transition.\n\nArguments\n\nports::String: Ports to configure for the workflow transition.\nimpl::String: Julia file containing the implementation called by the workflow transition.\nfnames::String: Function name to be executed by the workflow transition.\n\nSee also Workflow_PetriNet, generate_workflow, compile_workflow.\n\n\n\n\n\n","category":"method"},{"location":"api/#DistributedWorkflows.application_config-Tuple{Vector{String}, String, Vector{String}}","page":"API","title":"DistributedWorkflows.application_config","text":"application_config(ports::Vector{String}, impl::String, fnames::Vector{String})\n\nConvenience constructor for configuring a workflow application with multiple transitions sourcing their implementation details from the same file.\n\nArguments\n\nports::Vector{String}: List of ports to configure for the workflow transitions.\nimpl::String: Julia file containing the implementations called by the workflow transitions.\nfnames::Vector{String}: List of function names to be executed by the workflow transitions.\n\nSee also Workflow_PetriNet, generate_workflow, compile_workflow.\n\n\n\n\n\n","category":"method"},{"location":"api/#DistributedWorkflows.application_config-Tuple{Vector{String}, Vector{String}, Vector{String}}","page":"API","title":"DistributedWorkflows.application_config","text":"application_config(ports::Vector{String}, impl::Vector{String}, fnames::Vector{String})\n\nConstructor for configuring a workflow application with multiple transitions.\n\nArguments\n\nports::Vector{String}: List of ports to configure for the workflow transitions.\nimpl::Vector{String}: List of julia files containing the implementations called by the workflow transitions.\nfnames::Vector{String}: List of function names to be executed by the workflow transitions.\n\nSee also Workflow_PetriNet, generate_workflow, compile_workflow.\n\n\n\n\n\n","category":"method"},{"location":"api/#DistributedWorkflows.client-Tuple{Int64, String, String, String, Int64}","page":"API","title":"DistributedWorkflows.client","text":"client(workers::Int, nodefile::String, rif_strategy::String, log_host::String, log_port::Int)\n\nConfigures and starts a client setting up the workflow execution infrastructure and connects to a logging service. The nodefile will be automatically populated with the local host name if it doesn't exist in the given location or the rif_strategy is local.\n\nArguments\n\nworkers::Int: Number of workers launched per node.\nnodefile::String: Location of the nodefile.\nrif_strategy::String: Launch mode of the workflow infrastructure. Accepts ssh for distributing the workers across multiple nodes or local for running on the localhost only.\nlog_host::String: Host of the logging service.\nlog_port::Int : Port the logging service is listening on.\n\nSee also Workflow_PetriNet, generate_workflow, compile_workflow.\n\n\n\n\n\n","category":"method"},{"location":"api/#DistributedWorkflows.client-Tuple{Int64, String, String}","page":"API","title":"DistributedWorkflows.client","text":"client(workers::Int, nodefile::String, rif_strategy::String)\n\nConfigures and starts a client setting up the workflow execution infrastructure. The nodefile will be automatically populated with the local host name if it doesn't exist in the given location or the rif_strategy is local.\n\nArguments\n\nworkers::Int: Number of workers launched per node.\nnodefile::String: Location of the nodefile.\nrif_strategy::String: Launch mode of the workflow infrastructure. Accepts ssh for distributing the workers across multiple nodes or local for running on the localhost only.\n\nSee also Workflow_PetriNet, generate_workflow, compile_workflow.\n\n\n\n\n\n","category":"method"},{"location":"api/#DistributedWorkflows.implementation-Tuple{String, String}","page":"API","title":"DistributedWorkflows.implementation","text":"implementation(port_name::String, path::String)\n\nConvenience key-value pair wrapper for function signature clarity and readability.\n\nArguments\n\nport_name::String: Name of the port to contain the path string.\npath::String: Path to a julia source file.\n\nSee also Workflow_PetriNet, generate_workflow, compile_workflow, port_info.\n\n\n\n\n\n","category":"method"},{"location":"api/#DistributedWorkflows.input_pair-Tuple{String, String}","page":"API","title":"DistributedWorkflows.input_pair","text":"input_pair(port_name::String, path::String)\n\nConvenience key-value pair wrapper for function signature clarity and readability.\n\nArguments\n\nport_name::String: Name of the port to contain the path string.\npath::String: Path to an input data file.\n\nSee also Workflow_PetriNet, generate_workflow, compile_workflow, port_info.\n\n\n\n\n\n","category":"method"},{"location":"api/#DistributedWorkflows.port_info-Tuple{Any}","page":"API","title":"DistributedWorkflows.port_info","text":"port_info(KV)\n\nWrapper function for KeyValuePair.\n\n\n\n\n\n","category":"method"},{"location":"api/#DistributedWorkflows.submit_workflow-Tuple{Any, Any, Vector}","page":"API","title":"DistributedWorkflows.submit_workflow","text":"submit_workflow(client, workflow, input_params::Vector)\n\nSubmit a configured workflow to a client instance.\n\nArguments\n\nclient: A workflow client instance.\nworkflow: A configured workflow object.\ninput_params::Vector: List of inputs for the workflow execution.\n\nSee also Workflow_PetriNet, generate_workflow, compile_workflow.\n\n\n\n\n\n","category":"method"},{"location":"api/#DistributedWorkflows.workflow_config-Tuple{String, String, DistributedWorkflows.Application_config_many}","page":"API","title":"DistributedWorkflows.workflow_config","text":"workflow_config(workflow::String, output_dir::String, app_config::Application_config_many)\n\nConfigures a workflow for execution by a client instance.\n\nArguments\n\nworkflow::String: Name of the workflow.\noutput_dir::String: Location to store any output data generated during the workflow execution.\napp_config::Application_config_many: Application configurations for the workflow exeuction.\n\nSee also Workflow_PetriNet, generate_workflow, compile_workflow.\n\n\n\n\n\n","category":"method"},{"location":"api/#DistributedWorkflows.workflow_config-Tuple{String, String, DistributedWorkflows.Application_config}","page":"API","title":"DistributedWorkflows.workflow_config","text":"workflow_config(workflow::String, output_dir::String, app_config::Application_config)\n\nConfigures a workflow for execution by a client instance.\n\nArguments\n\nworkflow::String: Name of the workflow.\noutput_dir::String: Location to store any output data generated during the workflow execution.\napp_config::Application_config: Application configuration for the workflow exeuction.\n\nSee also Workflow_PetriNet, generate_workflow, compile_workflow.\n\n\n\n\n\n","category":"method"},{"location":"api/#DistributedWorkflows.workflow_config-Tuple{String, String, Vector{DistributedWorkflows.Application_config}}","page":"API","title":"DistributedWorkflows.workflow_config","text":"workflow_config(workflow::String, output_dir::String, app_config::Vector{Application_config})\n\nConfigures a workflow for execution by a client instance.\n\nArguments\n\nworkflow::String: Name of the workflow.\noutput_dir::String: Location to store any output data generated during the workflow execution.\napp_config::Vector{Application_config}: List of application configurations for the workflow exeuction.\n\nSee also Workflow_PetriNet, generate_workflow, compile_workflow.\n\n\n\n\n\n","category":"method"},{"location":"Scripting/scripting/#How-to-use-scripts-for-efficient-applications-and-workflow-generation","page":"How to use scripts for efficient applications and workflow generation","title":"How to use scripts for efficient applications and workflow generation","text":"","category":"section"},{"location":"application/#How-to-write-your-applications","page":"How to write your applications","title":"How to write your applications","text":"","category":"section"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"local_launch/#Locally-test-your-applications","page":"Locally test your applications","title":"Locally test your applications","text":"","category":"section"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"PetriNet/PetriNet/#Workflow","page":"Workflow","title":"Workflow","text":"","category":"section"},{"location":"PetriNet/PetriNet/","page":"Workflow","title":"Workflow","text":"CurrentModule = DistributedWorkflows","category":"page"},{"location":"PetriNet/PetriNet/","page":"Workflow","title":"Workflow","text":"Modules = [DistributedWorkflows]\nPages = [\"petri_net.jl\", \"workflow_compiler.jl\", \"workflow_renderer.jl\", \"xml_generator.jl\"]","category":"page"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.Workflow_PetriNet","page":"Workflow","title":"DistributedWorkflows.Workflow_PetriNet","text":"Workflow_PetriNet(workflow_name::String)\n\nA struct creating an empty Petri net named: \"workflow_name\". Throws an error, if workflow name is not provided.\n\nUse the connect() function to populate the Petri net, and remove() function to remove Petri net components.\n\nExamples\n\njulia> pn = Workflow_PetriNet(\"hello_julia\")\nA Petri net with name \"hello_julia\", having 0 ports, 0 places, and 0 transitions.\n\n\njulia> p1 = place(\"input1\", :string)\nPlace \"input1\" created.\n\n\njulia> p2 = place(\"input2\",:string)\nPlace \"input2\" created.\n\n\njulia> p3 = place(\"output\",:string)\nPlace \"output\" created.\n\n\njulia> t = transition(\"trans\")\nTransition trans created.\n\n\njulia> connect(pn, p1, t, :in)\nA Petri net with name \"hello_julia\", having 0 ports, 1 places, and 1 transitions.\n\n\njulia> connect(pn, p2, t, :read)\nA Petri net with name \"hello_julia\", having 0 ports, 2 places, and 1 transitions.\n\n\njulia> connect(pn, p3, t, :out_many)\nA Petri net with name \"hello_julia\", having 0 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p1, :in)\nA Petri net with name \"hello_julia\", having 1 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, :in, p2)\nA Petri net with name \"hello_julia\", having 2 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, :out, p3)\nA Petri net with name \"hello_julia\", having 3 ports, 3 places, and 1 transitions.\n\n\nSee also place, transition, arc, port, connect, remove, generate_workflow, compile_workflow.\n\n\n\n\n\n","category":"type"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.arc-Tuple{DistributedWorkflows.Place, DistributedWorkflows.Transition, Symbol}","page":"Workflow","title":"DistributedWorkflows.arc","text":"arc(place::Place, transition::Transition, type::Symbol)\n\nCreates an object of type Arc that joins a place to a transition in a Petri net. Note: acceptable arcs are one of the following:     :in, :read, :inout, :out, :out_many\n\nExamples\n\njulia> p1 = place(\"place1\", \"input_place\")\nPlace \"place1\" created.\n\n\njulia> t1 = transition(\"transition1\")\nTransition \"transition1\" created.\n\n\njulia> arc(p1, t1, :in)\nAn arc of type \"in\", connecting the place: place1 to the transition: transition1.\n\n\nSee also place, transition, Workflow_PetriNet, connect, remove.\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.connect-Tuple{Workflow_PetriNet, DistributedWorkflows.Place, DistributedWorkflows.Port}","page":"Workflow","title":"DistributedWorkflows.connect","text":"connect(pnet::Workflow_PetriNet, place::Place, port::Port)\nconnect(pnet::Workflow_PetriNet, port::Port, place::Place)\n\nGiven a Petri net, connects the given place to the given port. \n\nExamples\n\njulia> pn = Workflow_PetriNet(\"hello_julia\")\nA Petri net with name \"hello_julia\", having 0 ports, 0 places, and 0 transitions.\n\n\njulia> p1 = place(\"input1\", :string)\nPlace \"input1\" created.\n\n\njulia> p2 = place(\"input2\", :string)\nPlace \"input2\" created.\n\n\njulia> p3 = place(\"output_result\", :string)\nPlace \"output_result\" created.\n\n\njulia> t = transition(\"initial_transition\")\nTransition \"initial_transition\" created.\n\n\njulia> connect(pn,[(p1, :in),(p2, :read),(p3, :out_many)], t)\nA Petri net with name \"hello_julia\", having 0 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p1, :in)\nA Petri net with name \"hello_julia\", having 1 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p2, :in)\nA Petri net with name \"hello_julia\", having 2 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p3, :out)\nA Petri net with name \"hello_julia\", having 3 ports, 3 places, and 1 transitions.\n\n\nSee also place, transition, arc, port, Workflow_PetriNet, remove.\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.connect-Tuple{Workflow_PetriNet, DistributedWorkflows.Place, DistributedWorkflows.Transition, Symbol}","page":"Workflow","title":"DistributedWorkflows.connect","text":"connect(pnet::Workflow_PetriNet, place::Place, transition::Transition, arc_type::Symbol)\nconnect(pnet::Workflow_PetriNet, transition::Transition, place::Place, arc_type::Symbol)\n\nGiven a Petri net connects the place to the transition with the given arc type. \n\nExamples\n\n# initiating an empty Petri net.\njulia> pn = Workflow_PetriNet(\"hello_julia\")\nA Petri net with name \"hello_julia\", having 0 ports, 0 places, and 0 transitions.\n\n\njulia> p1 = place(\"input1\", :string)\nPlace \"input1\" created.\n\n\njulia> p2 = place(\"input2\",:string)\nPlace \"input2\" created.\n\n\njulia> p3 = place(\"output\",:string)\nPlace \"output\" created.\n\n\njulia> t = transition(\"transition1\")\nTransition \"transition1\" created.\n\n\njulia> connect(pn, p1,t, :in)\nA Petri net with name \"hello_julia\", having 0 ports, 1 places, and 1 transitions.\n\n\njulia> connect(pn, p2,t, :read)\nA Petri net with name \"hello_julia\", having 0 ports, 2 places, and 1 transitions.\n\n\njulia> connect(pn, p3,t, :out_many)\nA Petri net with name \"hello_julia\", having 0 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p1, :in)\nA Petri net with name \"hello_julia\", having 1 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, :in, p2)\nA Petri net with name \"hello_julia\", having 2 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, :out, p3)\nA Petri net with name \"hello_julia\", having 3 ports, 3 places, and 1 transitions.\n\n\nSee also place, transition, arc, port, Workflow_PetriNet, remove.\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.connect-Tuple{Workflow_PetriNet, Symbol, DistributedWorkflows.Place}","page":"Workflow","title":"DistributedWorkflows.connect","text":"connect(pnet::Workflow_PetriNet, port_type::Symbol, place::Place)\nconnect(pnet::Workflow_PetriNet, place::Place, port_type::Symbol)\n\nGiven a Petri net, connects the given place to a port of name portname and type porttype. \n\nExamples\n\njulia> pn = Workflow_PetriNet(\"hello_julia\")\nA Petri net with name \"hello_julia\", having 0 ports, 0 places, and 0 transitions.\n\n\njulia> p1 = place(\"input1\", :string)\nPlace \"input1\" created.\n\n\njulia> p2 = place(\"input2\", :string)\nPlace \"input2\" created.\n\n\njulia> p3 = place(\"output_result\", :string)\nPlace \"output_result\" created.\n\n\njulia> t = transition(\"initial_transition\")\nTransition \"initial_transition\" created.\n\n\njulia> connect(pn,[(p1, :in),(p2, :read),(p3, :out_many)], t)\nA Petri net with name \"hello_julia\", having 0 ports, 3 places, and 1 transitions.\n\njulia> prt = port(:in, p1)\nA port of type \"in\", connected to place \"input1\".\n\n\njulia> connect(pn, p1, prt)\nA Petri net with name \"hello_julia\", having 1 ports, 3 places, and 1 transitions.\n\n\n\nSee also place, transition, arc, port, Workflow_PetriNet, remove.\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.connect-Tuple{Workflow_PetriNet, Vector{Tuple{DistributedWorkflows.Place, Symbol}}, DistributedWorkflows.Transition}","page":"Workflow","title":"DistributedWorkflows.connect","text":"connect(pnet::Workflow_PetriNet, places_arcs::Vector{Tuple{Place, Symbol}}, transition::Transition)\nconnect(pnet::Workflow_PetriNet, transition::Transition, places_arcs::Vector{Tuple{Place, Symbol}})\n\nGiven a Petri net, connects the vector of tuples (places, arc_types) to the given transition. \n\nExamples\n\njulia> pn = Workflow_PetriNet(\"hello_julia\")\nA Petri net with name \"hello_julia\", having 0 ports, 0 places, and 0 transitions.\n\n\njulia> p1 = place(\"input1\", :string)\nPlace \"input1\" created.\n\n\njulia> p2 = place(\"input2\", :string)\nPlace \"input2\" created.\n\n\njulia> p3 = place(\"output_result\", :string)\nPlace \"output_result\" created.\n\n\njulia> t = transition(\"initial_transition\")\nTransition \"initial_transition\" created.\n\n\njulia> connect(pn,[(p1, :in),(p2, :read),(p3, :out_many)], t)\nA Petri net with name \"hello_julia\", having 0 ports, 3 places, and 1 transitions.\n\n\n\nSee also place, transition, arc, port, Workflow_PetriNet, remove.\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.connect-Tuple{Workflow_PetriNet, Vector{Tuple{DistributedWorkflows.Place, Symbol}}}","page":"Workflow","title":"DistributedWorkflows.connect","text":"connect(pnet::Workflow_PetriNet, place_port::Vector{Tuple{Place, Symbol}})\nconnect(pnet::Workflow_PetriNet, port_place::Vector{Tuple{Symbol, Place}})\n\nGiven a Petri net, connects the given places to a port of name portname and type porttype. \n\nSee also place, transition, arc, port, Workflow_PetriNet, remove.\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.place","page":"Workflow","title":"DistributedWorkflows.place","text":"place(name::String)\nplace(name::String, type::Symbol)\n\nCreates an object of type Place for the Petri net object. Note: acceptable place types are:   :string, :control, :control_init, :counter\n\nAlso, note that an input or output place cannot be of type :control.\n\nExamples\n\njulia> place(\"new_place\", :string)\nPlace \"new_place\" created.\n\njulia> place(\"in_place\", :control)\nPlace \"in_place\" with control token created.\n\nSee also transition, arc, port, Workflow_PetriNet, connect, remove.\n\n\n\n\n\n","category":"function"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.port-Tuple{Symbol, DistributedWorkflows.Place}","page":"Workflow","title":"DistributedWorkflows.port","text":"port(type::Symbol, place::Place)\n\nCreates a port connecting to the given place with respect to the arc type. Note: the allowed port types are one of the following:     :in, :out, :inout\n\nExamples\n\njulia> p1 = place(\"input1\", :string)\nPlace \"input1\" created.\n\n\njulia> port(:in, p1)\nA port of type \"in\" connected to place \"input1\".\n\n\nSee also place, Workflow_PetriNet, connect, remove.\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.remove-Tuple{Workflow_PetriNet, DistributedWorkflows.Arc}","page":"Workflow","title":"DistributedWorkflows.remove","text":"remove(pnet::Workflow_PetriNet, arc::Arc)\n\nRemove the arc from the given Petri net.  \n\nExamples\n\njulia> pn = Workflow_PetriNet(\"hello_julia\")\nA Petri net with name \"hello_julia\", having 0 ports, 0 places, and 0 transitions.\n\n\njulia> p1 = place(\"input1\", :string)\nPlace \"input1\" created.\n\n\njulia> p2 = place(\"input2\", :string)\nPlace \"input2\" created.\n\n\njulia> p3 = place(\"output_result\", :string)\nPlace \"output_result\" created.\n\n\njulia> t = transition(\"initial_transition\")\nTransition \"initial_transition\" created.\n\n\njulia> connect(pn,[(p1, :in),(p2, :read),(p3, :out_many)], t)\nA Petri net with name \"hello_julia\", having 0 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p1, :in)\nA Petri net with name \"hello_julia\", having 1 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p2, :in)\nA Petri net with name \"hello_julia\", having 2 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p3, :out)\nA Petri net with name \"hello_julia\", having 3 ports, 3 places, and 1 transitions.\n\n\njulia> a1 = arc(p1,t,:in)\nAn arc of type \"in\", connecting the place: input1 to the transition: initial_transition.\n\n\njulia> pn.arcs\n3-element Vector{DistributedWorkflows.Arc}:\n An arc of type \"in\", connecting the place: input1 to the transition: initial_transition.\n\n An arc of type \"read\", connecting the place: input2 to the transition: initial_transition.\n\n An arc of type \"out_many\", connecting the place: output_result to the transition: initial_transition.\n\n\njulia> remove(pn, a1)\nA Petri net with name \"hello_julia\", having 3 ports, 3 places, and 1 transitions.\n\n\njulia> pn.arcs\n2-element Vector{DistributedWorkflows.Arc}:\n An arc of type \"read\", connecting the place: input2 to the transition: initial_transition.\n\n An arc of type \"out_many\", connecting the place: output_result to the transition: initial_transition.\n\n\n\nSee also place, transition, arc, port, Workflow_PetriNet, connect.\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.remove-Tuple{Workflow_PetriNet, DistributedWorkflows.Place}","page":"Workflow","title":"DistributedWorkflows.remove","text":"remove(pnet::Workflow_PetriNet, place::Place)\n\nRemove the place from the given Petri net.  \n\nExamples\n\njulia> pn = Workflow_PetriNet(\"hello_julia\")\nA Petri net with name \"hello_julia\", having 0 ports, 0 places, and 0 transitions.\n\n\njulia> p1 = place(\"input1\", :string)\nPlace \"input1\" created.\n\n\njulia> p2 = place(\"input2\", :string)\nPlace \"input2\" created.\n\n\njulia> p3 = place(\"output_result\", :string)\nPlace \"output_result\" created.\n\n\njulia> t = transition(\"initial_transition\")\nTransition \"initial_transition\" created.\n\n\njulia> connect(pn,[(p1, :in),(p2, :read),(p3, :out_many)], t)\nA Petri net with name \"hello_julia\", having 0 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p1, :in)\nA Petri net with name \"hello_julia\", having 1 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p2, :in)\nA Petri net with name \"hello_julia\", having 2 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p3, :out)\nA Petri net with name \"hello_julia\", having 3 ports, 3 places, and 1 transitions.\n\n\njulia> pn.places\n3-element Vector{DistributedWorkflows.Place}:\n Place \"input1\" created.\n\n Place \"input2\" created.\n\n Place \"output_result\" created.\n\n\njulia> remove(pn, p1)\nA Petri net with name \"hello_julia\", having 2 ports, 2 places, and 1 transitions.\n\n\njulia> pn.places\n2-element Vector{DistributedWorkflows.Place}:\n Place \"input2\" created.\n\n Place \"output_result\" created.\n\n\n\nSee also place, transition, arc, port, Workflow_PetriNet, connect.\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.remove-Tuple{Workflow_PetriNet, DistributedWorkflows.Port}","page":"Workflow","title":"DistributedWorkflows.remove","text":"remove(pnet::Workflow_PetriNet, port::Port)\n\nRemove the port from the given Petri net.  \n\nExamples\n\njulia> pn = Workflow_PetriNet(\"hello_julia\")\nA Petri net with name \"hello_julia\", having 0 ports, 0 places, and 0 transitions.\n\n\njulia> p1 = place(\"input1\", :string)\nPlace \"input1\" created.\n\n\njulia> p2 = place(\"input2\", :string)\nPlace \"input2\" created.\n\n\njulia> p3 = place(\"output_result\", :string)\nPlace \"output_result\" created.\n\n\njulia> t = transition(\"initial_transition\")\nTransition \"initial_transition\" created.\n\n\njulia> connect(pn,[(p1, :in),(p2, :read),(p3, :out_many)], t)\nA Petri net with name \"hello_julia\", having 0 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p1, :in)\nA Petri net with name \"hello_julia\", having 1 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p2, :in)\nA Petri net with name \"hello_julia\", having 2 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p3, :out)\nA Petri net with name \"hello_julia\", having 3 ports, 3 places, and 1 transitions.\n\n\njulia> pn.ports\n3-element Vector{DistributedWorkflows.Port}:\n A port of type \"in\" connected to place \"input1\".\n\n A port of type \"in\" connected to place \"input2\".\n\n A port of type \"out\" connected to place \"output_result\".\n\n\njulia> prt = port(:in, p1)\nA port of type \"in\" connected to place \"input1\".\n\n\njulia> remove(pn, prt)\nA Petri net with name \"hello_julia\", having 2 ports, 3 places, and 1 transitions.\n\n\njulia> pn.ports\n2-element Vector{DistributedWorkflows.Port}:\n A port of type \"in\" connected to place \"input2\".\n\n A port of type \"out\" connected to place \"output_result\".\n\n\n\nSee also place, transition, arc, port, Workflow_PetriNet, connect.\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.remove-Tuple{Workflow_PetriNet, DistributedWorkflows.Transition}","page":"Workflow","title":"DistributedWorkflows.remove","text":"remove(pnet::Workflow_PetriNet,  transition::Transition)\n\nRemove the transition from the given Petri net.  \n\nExamples\n\njulia> pn = Workflow_PetriNet(\"hello_julia\")\nA Petri net with name \"hello_julia\", having 0 ports, 0 places, and 0 transitions.\n\n\njulia> p1 = place(\"input1\", :string)\nPlace \"input1\" created.\n\n\njulia> p2 = place(\"input2\", :string)\nPlace \"input2\" created.\n\n\njulia> p3 = place(\"output_result\", :string)\nPlace \"output_result\" created.\n\n\njulia> t = transition(\"initial_transition\")\nTransition \"initial_transition\" created.\n\n\njulia> connect(pn,[(p1, :in),(p2, :read),(p3, :out_many)], t)\nA Petri net with name \"hello_julia\", having 0 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p1, :in)\nA Petri net with name \"hello_julia\", having 1 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p2, :in)\nA Petri net with name \"hello_julia\", having 2 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p3, :out)\nA Petri net with name \"hello_julia\", having 3 ports, 3 places, and 1 transitions.\n\n\njulia> pn.transitions\n1-element Vector{DistributedWorkflows.Transition}:\n Transition \"initial_transition\" created.\n\n\njulia> remove(pn, t)\nA Petri net with name \"hello_julia\", having 2 ports, 2 places, and 0 transitions.\n\n\njulia> pn.transitions\nDistributedWorkflows.Transition[]\n\n\n\nSee also place, transition, arc, port, Workflow_PetriNet, connect.\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.transition","page":"Workflow","title":"DistributedWorkflows.transition","text":"transition(name::String, exp::Vector{String})\ntransition(name::String, exp::Vector{String}, condition::String)\n\nCreates an object of type Transition for the Petri net object containing an expression. If a condition string is given, the the transition is a condiational transition.\n\nNote: the condition and/or expression follows Fortran style expression. The following are possible expressions that can be wrapped in a string: Comparison expressions:  :lt: :le: :gt: :ge: :ne: :eq: Boolean expressions:  :or: :and: :not: Operations:  +, -, *, /, :=\n\nSee the example on how to use.\n\nExamples\n\njulia> transition(\"transition1\")\nTransition \"transition1\" created.\n\njulia> transition(\"do_stuff\", \"counter :eq: 0UL\")\nA conditional transition \"do_stuff\" created.\n\n\nSee also place, arc, Workflow_PetriNet, connect, remove.\n\n\n\n\n\n","category":"function"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.transition-2","page":"Workflow","title":"DistributedWorkflows.transition","text":"transition(name::String)\ntransition(name::String, condition::String)\n\nCreates an object of type Transition for the Petri net object. If a condition string is given, the the transition is a condiational transition.\n\nNote: the condition and/or expression follows Fortran style expression. The following are possible expressions that can be wrapped in a string:   Comparison expressions:  :lt: :le: :gt: :ge: :ne: :eq:   Boolean expressions:  :or: :and: :not:   Operations:  +, -, *, /, :=\n\nSee the example on how to use.\n\nExamples\n\njulia> transition(\"transition1\")\nTransition \"transition1\" created.\n\njulia> transition(\"do_stuff\", \"counter :eq: 0UL\")\nA conditional transition \"do_stuff\" created.\n\n\nSee also place, arc, Workflow_PetriNet, connect, remove.\n\n\n\n\n\n","category":"function"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.compile_workflow","page":"Workflow","title":"DistributedWorkflows.compile_workflow","text":"compile_workflow(workflow::String, build_dir::String)\n\nGiven a path for the workflow and an accessible location for the build directory, this function compiles the XML workflow.\n\nNote:   workflow => absolute path to the xpnet file   build_dir => path to build directory\n\nExamples\n\ntmp_dir = joinpath(@__DIR, \"tmp\")\njulia> compile_workflow(joinpath(tmp_dir, \"hello_julia.xpnet\"))\n...\nSuccess: Workflow compiled\n\n\nSee also place, transition, arc, port, Workflow_PetriNet, connect, remove, generate_workflow.\n\n\n\n\n\n","category":"function"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.savefig","page":"Workflow","title":"DistributedWorkflows.savefig","text":"savefig(pnet::Workflow_PetriNet)\nsavefig(pnet::Workflow_PetriNet, format::Symbol)\nsavefig(pnet::Workflow_PetriNet, path::String)\nsavefig(pnet::Workflow_PetriNet, format::Symbol, path::String)\n\nBy default this method generates a PNG file after compiling the Petri net into an XML workflow and compiling the workflow. If path is not given then the workflow image is stored in your home directory in the \"tmp/pnet\" folder.\n\nNote: Supports all the file formats by GraphViz. For example, :png, :svg, :jpg, :pdf, :webp\n\nFor other formats, check GraphViz documentation: https://graphviz.org/docs/outputs/\n\nExamples\n\njulia> # first generate a workflow in the form of a Petri net\njulia> pn = Workflow_PetriNet(\"hello_julia\")\nA Petri net with name \"hello_julia\", having 0 ports, 0 places, and 0 transitions.\n\n\njulia> p1 = place(\"input_file1\")\nPlace \"input_file1\" created.\n\n\njulia> p2 = place(\"input_file2\")\nPlace \"input_file2\" created.\n\n\njulia> p3 = place(\"output_file1\")\nPlace \"output_file1\" created.\n\n\njulia> p4 = place(\"output_file2\")\nPlace \"output_file2\" created.\n\n\njulia> t = transition(\"hello_jl\")\nTransition \"hello_jl\" created.\n\n\njulia> connect(pn,[(p1, :in),(p2, :in),(p3, :out), (p4, :out)], t)\nA Petri net with name \"hello_julia\", having 0 ports, 4 places, and 1 transitions.\n\n\njulia> connect(pn, p1, :in)\nA Petri net with name \"hello_julia\", having 1 ports, 4 places, and 1 transitions.\n\n\njulia> connect(pn, p2, :in)\nA Petri net with name \"hello_julia\", having 2 ports, 4 places, and 1 transitions.\n\n\njulia> connect(pn, p3, :out)\nA Petri net with name \"hello_julia\", having 3 ports, 4 places, and 1 transitions.\n\n\njulia> connect(pn, p4, :out)\nA Petri net with name \"hello_julia\", having 4 ports, 4 places, and 1 transitions.\n\n\njulia> pn\nA Petri net with name \"hello_julia\", having 4 ports, 4 places, and 1 transitions.\n\n# now generate the workflow image\njulia> savefig(pn, :jpg, \"/home/pnet\")\n\"An image of the workflow Petri net could be found in /home/pnet/hello_julia.jpg\"\n\n# the following takes the Petri net and the path for storage and generates a PNG file which is stored in the provided path.\njulia> savefig(pn, \"/home/pnet\")\n\"An image of the workflow Petri net could be found in /home/pnet/hello_julia.png\"\n\n\nSee also Workflow_PetriNet, place, transition, arc, port, Workflow_PetriNet, connect, remove, compile_workflow, generate_workflow.\n\n\n\n\n\n","category":"function"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.show_workflow-Tuple{Workflow_PetriNet}","page":"Workflow","title":"DistributedWorkflows.show_workflow","text":"show_workflow(pnet::Workflow_PetriNet)\n\nConverts the given Petri net object to an SVG string and displays it as HTML to the screen. This functionality is meant to be used within environments like IJulia.jl or Pluto.jl, not the REPL.\n\nArguments\n\npnet::Workflow_PetriNet: Petri net object describing the workflow to visualize\n\n\n\n\n\n","category":"method"},{"location":"PetriNet/PetriNet/#DistributedWorkflows.generate_workflow","page":"Workflow","title":"DistributedWorkflows.generate_workflow","text":"generate_workflow(pnet::Workflow_PetriNet)\ngenerate_workflow(pnet::Workflow_PetriNet, path::String)\n\nGiven a Petri net description, creates an XML workflow and writes it to a file in the path.\n\nExamples\n\njulia> pn = Workflow_PetriNet(\"hello_julia\")\nA Petri net with name \"hello_julia\", having 0 ports, 0 places, and 0 transitions.\n\n\njulia> p1 = place(\"input1\", :string)\nPlace input1 with control token created.\n\n\njulia> p2 = place(\"input2\",:string)\nPlace input2 with control token created.\n\n\njulia> p3 = place(\"output\",:string)\nPlace output with control token created.\n\n\njulia> t = transition(\"trans\")\nTransition trans created.\n\n\njulia> connect(pn, p1,t, :in)\nA Petri net with name \"hello_julia\", having 0 ports, 1 places, and 1 transitions.\n\n\njulia> connect(pn, p2,t, :read)\nA Petri net with name \"hello_julia\", having 0 ports, 2 places, and 1 transitions.\n\n\njulia> connect(pn, p3,t, :out_many)\nA Petri net with name \"hello_julia\", having 0 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, p1, :in)\nA Petri net with name \"hello_julia\", having 1 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, :in, p2)\nA Petri net with name \"hello_julia\", having 2 ports, 3 places, and 1 transitions.\n\n\njulia> connect(pn, :out, p3)\nA Petri net with name \"hello_julia\", having 3 ports, 3 places, and 1 transitions.\n\n# If a path is not provided, the generated workflow is stored in the home directory in the folder: tmp\njulia> generate_workflow(pn, \"/home/pnet/\")\nAn XML workflow called: parallel_reduce.xpnet has been written to the location: /home/pnet/.\n\n\nSee also place, transition, arc, port, Workflow_PetriNet, connect, remove, compile_workflow.\n\n\n\n\n\n","category":"function"},{"location":"#DistributedWorkflows.jl","page":"Introduction","title":"DistributedWorkflows.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = DistributedWorkflows","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"#Overview","page":"Introduction","title":"Overview","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package is a Julia interface to a distributed task-based workflow management system. At the moment, we recommend it for long running processes. In the new updates, we are striving to make it available for all sorts of runs.","category":"page"},{"location":"#How-to-cite-DistributedWorkflows.jl","page":"Introduction","title":"How to cite DistributedWorkflows.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Please cite this package as follows if you use it in your work:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"@misc{DistributedWorkflows,\n  author    = {Dastur, Firoozeh and Zeyen, Max and Rahn, Mirko},\n  title     = {DistributedWorkflows.jl - A Julia interface to a distributed \n               task-based workflow management system},\n  year     = {2024},\n  month    = {January},\n  howpublished     = {\\url{https://github.com/FiroozehDastur/DistributedWorkflows.jl}}\n}","category":"page"},{"location":"#Initial-setup","page":"Introduction","title":"Initial setup","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"DistributedWorkflows.jl requires the package manager Spack to install necessary binaries. Follow the steps from Spack - Getting Started to install Spack. You might also want to read Spack - Basic Usage to learn basic usage of Spack.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"info: Info\nIf you already have Spack installed and sourced in your path, then you may skip the above step.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Next, download the respective binary for your system from the following: Binaries for DistributedWorkflows.jl.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"info: Info\nThe binaries are all built for the x86_64_v3 architechture","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Once the installation is complete, navigate to the directory where you saved your binary file and install it in a target location of your choice as follows:\n./distributedworkflow_myOS --target zeda","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"info: Info\nReplace myOs with the specific name of the Linux distribution from the downloaded binary. For example, if you downloaded the binary file for Ubuntu 22, then you can run ./distributedworkflow_ubuntu22 --target zeda.\nYou are free to choose any other target location besides zeda.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"If the installation was successful, then running the following should load the required dependencies of DistributedWorkflows.jl.\nspack load distributedworkflow\nYou can check the loaded packages by running:\nspack find --loaded\nIf you would like to visualise the workflows before compilation, it is advised to download Graphviz to be able to visualise it in different formats.\nNow, we are set up to use DistributedWorkflows.jl to parallelise our application.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Once this package is registered at it can be installed similar to any Julia package by doing:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"import Pkg; Pkg.add(\"DistributedWorkflows\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For now, doing the following should work:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Once you have the Julia REPL open, enter the package mode of julia and add the github repo as follows:\n] add https://github.com/FiroozehDastur/DistributedWorkflows.jl.git\nOnce the package administrator has installed DistributedWorkflows, it can be loaded like any other Julia package by running using DistributedWorkflows in the Julia REPL.","category":"page"},{"location":"#How-to-use-DistributedWorkflows.jl","page":"Introduction","title":"How to use DistributedWorkflows.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To use DistributedWorkflows to parallelise an application, the following steps are required:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Setting up your Julia application structure.\nDesigning a workflow in the form of a Petri net.\nA serializer descriptor. If you are using Julia's default serializer then you can skip this step.\nSetting up the workflow launcher.\nCompile and execute.","category":"page"},{"location":"#A-simple-\"Hello-world\"-example","page":"Introduction","title":"A simple \"Hello world\" example","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"With the following example, we demonstrate the usage with a simple \"Hello World\" example.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Assuming that we use Julia's native serializer, let's say we have the following Julia code to run:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"function hello_julia(In1, In2)\n  a1 = In1 * 2;\n  a2 = In2 - 3;\n  str = [\"if you are reading this, then your application worked...\"]\n  arr = [a1, a2]\n  g = gcd(arr)\n  ar = [(In1, In2, a1, a2, g)]\n  return [str, ar]\nend","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"It could be stored in a file, say hello.jl. Based on this piece of code we can see that the workflow is a Petri net with 2 input places, 1 transition, and 2 output places.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The Petri net can now be constructed as follows:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"# A Petri net with 2 input places and 2 output places\n\n# create an empty Petri net called \"hello_julia\"\npn = PetriNet(\"hello_julia\") \n\n# create the input and output places\np1 = place(\"input_file1\") \np2 = place(\"input_file2\")\np3 = place(\"output_file1\")\np4 = place(\"output_file2\")\n\n# add a transition\nt = transition(\"hello_jl\")\n\n# connect all the places and transitions based on their connection type to the Petri net\nconnect(pn,[(p1, :in),(p2, :in),(p3, :out), (p4, :out)], t)\n\n# Alternatively, each place and transition can be connected individually, as shown below:\n#\n# connect(pn, p1, :in)\n# connect(pn, p2, :in)\n# connect(pn, p3, :out)\n# connect(pn, p4, :out)\n\n# generate the workflow in the folder \"tmp\" under the home directory.\nwf = generate_workflow(pn)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To visualise the workflow before generating the XML format of it, run view_workflow(pn). This would generate the following image as a PNG in a default location.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: hello_julia_net)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To visualise the workflow in one of the other formats and a specific path use view_workflow(pnet::PetriNet, format::Symbol, path::String). For example, view_workflow(pn, :svg, \"home/usr/zeda/net\") generates an SVG of the above Petri net and stores it in the path home/usr/zeda/net.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"warning: Warning\nThe renderer works best if you have graphviz installed on your system. For Ubuntu 22 you can do apt install graphviz to install it.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"info: Info\nThe number of transitions coincide with the number of Julia methods to execute. Each input/output token corresponds to a string containing the file name where data is stored.","category":"page"},{"location":"#Testing-the-example-locally","page":"Introduction","title":"Testing the example locally","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Assuming that you have a workflow Petri net stored in an accessible location, use the following function to compile the workflow:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"compile_workflow(<workflow-name>.xpnet, \"/path/to/build/location\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Next, start the client using","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"client(<number-of-workers>, \"/path/to/nodefile\", \"rif-strategy\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As a next step, it is advisible to create a script with your workflow configuration (see the executor files in the examples folder), and submit your application using the submit_workflow() function.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Once your application runs through, the output files will be stored in your desired output location.","category":"page"},{"location":"#Features","page":"Introduction","title":"Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Serializer agnostic, for details see custom serialize section in the documentation.\nReduced complexity in deploying your parallel application.\nLocalised testing of workflow, before launching expensive cluster resources.\nWrite your own xpnet file and compile your workflow using the compile_workflow() function. \nYou could also, generate a Petri net in Julia using PetriNet() and generate the xpnet file from the Petri net using generate_workflow() before compiling it.\nVisualise Petri net within the Julia REPL in multiple formats.","category":"page"},{"location":"#Shortcomings","page":"Introduction","title":"Shortcomings","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"At the moment, this package is only efficient and recommended for long running processes.\nDue to the underlying workflow manager, this package only supports the following operating systems:\n* Ubuntu 20.04 LTS\n* Ubuntu 22.04 LTS\nHowever, we have provided binaries to some additional distributions that we are testing against. In case of any problems related to installation or setup, please get in touch with us.","category":"page"},{"location":"#What's-next?","page":"Introduction","title":"What's next?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Create your own application and use DistributedWorkflows to create your first Petri net workflow, run and test you application locally before acquiring cluster resources.","category":"page"},{"location":"#See-also","page":"Introduction","title":"See also","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"More Examples\nXPNET Format Schema\nGPI-Space database on Petri nets","category":"page"},{"location":"#Appendix","page":"Introduction","title":"Appendix","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The underlying workflow management system is called GPI-Space which is a task-based workflow management system for parallel applications developed at Fraunhofer ITWM by the CC-HPC group.","category":"page"}]
}
